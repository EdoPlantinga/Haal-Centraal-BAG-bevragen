# coding: utf-8

"""
    Huidige bevragingen API

    Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: bag@kadaster.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdresEmbedded(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'openbare_ruimte': 'OpenbareRuimteHalBasis',
        'nummeraanduiding': 'NummeraanduidingHalBasis',
        'woonplaats': 'WoonplaatsHalBasis'
    }

    attribute_map = {
        'openbare_ruimte': 'openbareRuimte',
        'nummeraanduiding': 'nummeraanduiding',
        'woonplaats': 'woonplaats'
    }

    def __init__(self, openbare_ruimte=None, nummeraanduiding=None, woonplaats=None, local_vars_configuration=None):  # noqa: E501
        """AdresEmbedded - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._openbare_ruimte = None
        self._nummeraanduiding = None
        self._woonplaats = None
        self.discriminator = None

        if openbare_ruimte is not None:
            self.openbare_ruimte = openbare_ruimte
        if nummeraanduiding is not None:
            self.nummeraanduiding = nummeraanduiding
        if woonplaats is not None:
            self.woonplaats = woonplaats

    @property
    def openbare_ruimte(self):
        """Gets the openbare_ruimte of this AdresEmbedded.  # noqa: E501


        :return: The openbare_ruimte of this AdresEmbedded.  # noqa: E501
        :rtype: OpenbareRuimteHalBasis
        """
        return self._openbare_ruimte

    @openbare_ruimte.setter
    def openbare_ruimte(self, openbare_ruimte):
        """Sets the openbare_ruimte of this AdresEmbedded.


        :param openbare_ruimte: The openbare_ruimte of this AdresEmbedded.  # noqa: E501
        :type: OpenbareRuimteHalBasis
        """

        self._openbare_ruimte = openbare_ruimte

    @property
    def nummeraanduiding(self):
        """Gets the nummeraanduiding of this AdresEmbedded.  # noqa: E501


        :return: The nummeraanduiding of this AdresEmbedded.  # noqa: E501
        :rtype: NummeraanduidingHalBasis
        """
        return self._nummeraanduiding

    @nummeraanduiding.setter
    def nummeraanduiding(self, nummeraanduiding):
        """Sets the nummeraanduiding of this AdresEmbedded.


        :param nummeraanduiding: The nummeraanduiding of this AdresEmbedded.  # noqa: E501
        :type: NummeraanduidingHalBasis
        """

        self._nummeraanduiding = nummeraanduiding

    @property
    def woonplaats(self):
        """Gets the woonplaats of this AdresEmbedded.  # noqa: E501


        :return: The woonplaats of this AdresEmbedded.  # noqa: E501
        :rtype: WoonplaatsHalBasis
        """
        return self._woonplaats

    @woonplaats.setter
    def woonplaats(self, woonplaats):
        """Sets the woonplaats of this AdresEmbedded.


        :param woonplaats: The woonplaats of this AdresEmbedded.  # noqa: E501
        :type: WoonplaatsHalBasis
        """

        self._woonplaats = woonplaats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdresEmbedded):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdresEmbedded):
            return True

        return self.to_dict() != other.to_dict()
