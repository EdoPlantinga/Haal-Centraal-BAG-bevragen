# coding: utf-8

"""
    Huidige bevragingen API

    Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: bag@kadaster.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdresUitgebreidAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'korte_naam': 'str',
        'nummeraanduiding_identificatie': 'str',
        'openbare_ruimte_identificatie': 'str',
        'woonplaats_identificatie': 'str',
        'adresseerbaar_object_identificatie': 'str',
        'pand_identificaties': 'list[str]',
        'is_nevenadres': 'bool',
        'geconstateerd': 'bool',
        'mogelijk_onjuist': 'AdresMogelijkOnjuist'
    }

    attribute_map = {
        'korte_naam': 'korteNaam',
        'nummeraanduiding_identificatie': 'nummeraanduidingIdentificatie',
        'openbare_ruimte_identificatie': 'openbareRuimteIdentificatie',
        'woonplaats_identificatie': 'woonplaatsIdentificatie',
        'adresseerbaar_object_identificatie': 'adresseerbaarObjectIdentificatie',
        'pand_identificaties': 'pandIdentificaties',
        'is_nevenadres': 'isNevenadres',
        'geconstateerd': 'geconstateerd',
        'mogelijk_onjuist': 'mogelijkOnjuist'
    }

    def __init__(self, korte_naam=None, nummeraanduiding_identificatie=None, openbare_ruimte_identificatie=None, woonplaats_identificatie=None, adresseerbaar_object_identificatie=None, pand_identificaties=None, is_nevenadres=None, geconstateerd=None, mogelijk_onjuist=None, local_vars_configuration=None):  # noqa: E501
        """AdresUitgebreidAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._korte_naam = None
        self._nummeraanduiding_identificatie = None
        self._openbare_ruimte_identificatie = None
        self._woonplaats_identificatie = None
        self._adresseerbaar_object_identificatie = None
        self._pand_identificaties = None
        self._is_nevenadres = None
        self._geconstateerd = None
        self._mogelijk_onjuist = None
        self.discriminator = None

        if korte_naam is not None:
            self.korte_naam = korte_naam
        if nummeraanduiding_identificatie is not None:
            self.nummeraanduiding_identificatie = nummeraanduiding_identificatie
        if openbare_ruimte_identificatie is not None:
            self.openbare_ruimte_identificatie = openbare_ruimte_identificatie
        if woonplaats_identificatie is not None:
            self.woonplaats_identificatie = woonplaats_identificatie
        if adresseerbaar_object_identificatie is not None:
            self.adresseerbaar_object_identificatie = adresseerbaar_object_identificatie
        if pand_identificaties is not None:
            self.pand_identificaties = pand_identificaties
        if is_nevenadres is not None:
            self.is_nevenadres = is_nevenadres
        if geconstateerd is not None:
            self.geconstateerd = geconstateerd
        if mogelijk_onjuist is not None:
            self.mogelijk_onjuist = mogelijk_onjuist

    @property
    def korte_naam(self):
        """Gets the korte_naam of this AdresUitgebreidAllOf.  # noqa: E501

        De officiële openbareruimtenaam of een verkorte versie. Beiden hebben maximaal 24 tekens.  # noqa: E501

        :return: The korte_naam of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._korte_naam

    @korte_naam.setter
    def korte_naam(self, korte_naam):
        """Sets the korte_naam of this AdresUitgebreidAllOf.

        De officiële openbareruimtenaam of een verkorte versie. Beiden hebben maximaal 24 tekens.  # noqa: E501

        :param korte_naam: The korte_naam of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                korte_naam is not None and len(korte_naam) > 24):
            raise ValueError("Invalid value for `korte_naam`, length must be less than or equal to `24`")  # noqa: E501

        self._korte_naam = korte_naam

    @property
    def nummeraanduiding_identificatie(self):
        """Gets the nummeraanduiding_identificatie of this AdresUitgebreidAllOf.  # noqa: E501

        Fungeert ook als identificatie van het adres.  # noqa: E501

        :return: The nummeraanduiding_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._nummeraanduiding_identificatie

    @nummeraanduiding_identificatie.setter
    def nummeraanduiding_identificatie(self, nummeraanduiding_identificatie):
        """Sets the nummeraanduiding_identificatie of this AdresUitgebreidAllOf.

        Fungeert ook als identificatie van het adres.  # noqa: E501

        :param nummeraanduiding_identificatie: The nummeraanduiding_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._nummeraanduiding_identificatie = nummeraanduiding_identificatie

    @property
    def openbare_ruimte_identificatie(self):
        """Gets the openbare_ruimte_identificatie of this AdresUitgebreidAllOf.  # noqa: E501


        :return: The openbare_ruimte_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._openbare_ruimte_identificatie

    @openbare_ruimte_identificatie.setter
    def openbare_ruimte_identificatie(self, openbare_ruimte_identificatie):
        """Sets the openbare_ruimte_identificatie of this AdresUitgebreidAllOf.


        :param openbare_ruimte_identificatie: The openbare_ruimte_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._openbare_ruimte_identificatie = openbare_ruimte_identificatie

    @property
    def woonplaats_identificatie(self):
        """Gets the woonplaats_identificatie of this AdresUitgebreidAllOf.  # noqa: E501


        :return: The woonplaats_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._woonplaats_identificatie

    @woonplaats_identificatie.setter
    def woonplaats_identificatie(self, woonplaats_identificatie):
        """Sets the woonplaats_identificatie of this AdresUitgebreidAllOf.


        :param woonplaats_identificatie: The woonplaats_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._woonplaats_identificatie = woonplaats_identificatie

    @property
    def adresseerbaar_object_identificatie(self):
        """Gets the adresseerbaar_object_identificatie of this AdresUitgebreidAllOf.  # noqa: E501


        :return: The adresseerbaar_object_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._adresseerbaar_object_identificatie

    @adresseerbaar_object_identificatie.setter
    def adresseerbaar_object_identificatie(self, adresseerbaar_object_identificatie):
        """Sets the adresseerbaar_object_identificatie of this AdresUitgebreidAllOf.


        :param adresseerbaar_object_identificatie: The adresseerbaar_object_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._adresseerbaar_object_identificatie = adresseerbaar_object_identificatie

    @property
    def pand_identificaties(self):
        """Gets the pand_identificaties of this AdresUitgebreidAllOf.  # noqa: E501

        Identificatie(s) van het pand of de panden waar het verblijfsobject deel van is.  # noqa: E501

        :return: The pand_identificaties of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._pand_identificaties

    @pand_identificaties.setter
    def pand_identificaties(self, pand_identificaties):
        """Sets the pand_identificaties of this AdresUitgebreidAllOf.

        Identificatie(s) van het pand of de panden waar het verblijfsobject deel van is.  # noqa: E501

        :param pand_identificaties: The pand_identificaties of this AdresUitgebreidAllOf.  # noqa: E501
        :type: list[str]
        """

        self._pand_identificaties = pand_identificaties

    @property
    def is_nevenadres(self):
        """Gets the is_nevenadres of this AdresUitgebreidAllOf.  # noqa: E501

        Indicatie dat dit adres een nevenadres is van een adresseerbaar object. Het adres is een hoofdadres als deze indicatie niet wordt meegeleverd.  # noqa: E501

        :return: The is_nevenadres of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_nevenadres

    @is_nevenadres.setter
    def is_nevenadres(self, is_nevenadres):
        """Sets the is_nevenadres of this AdresUitgebreidAllOf.

        Indicatie dat dit adres een nevenadres is van een adresseerbaar object. Het adres is een hoofdadres als deze indicatie niet wordt meegeleverd.  # noqa: E501

        :param is_nevenadres: The is_nevenadres of this AdresUitgebreidAllOf.  # noqa: E501
        :type: bool
        """

        self._is_nevenadres = is_nevenadres

    @property
    def geconstateerd(self):
        """Gets the geconstateerd of this AdresUitgebreidAllOf.  # noqa: E501

        Indicatie dat dit adres in de registratie is opgenomen door een feitelijke constatering, zonder dat er sprake was van een brondocument/vergunning. Het adres is mogelijk illegaal.  # noqa: E501

        :return: The geconstateerd of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._geconstateerd

    @geconstateerd.setter
    def geconstateerd(self, geconstateerd):
        """Sets the geconstateerd of this AdresUitgebreidAllOf.

        Indicatie dat dit adres in de registratie is opgenomen door een feitelijke constatering, zonder dat er sprake was van een brondocument/vergunning. Het adres is mogelijk illegaal.  # noqa: E501

        :param geconstateerd: The geconstateerd of this AdresUitgebreidAllOf.  # noqa: E501
        :type: bool
        """

        self._geconstateerd = geconstateerd

    @property
    def mogelijk_onjuist(self):
        """Gets the mogelijk_onjuist of this AdresUitgebreidAllOf.  # noqa: E501


        :return: The mogelijk_onjuist of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: AdresMogelijkOnjuist
        """
        return self._mogelijk_onjuist

    @mogelijk_onjuist.setter
    def mogelijk_onjuist(self, mogelijk_onjuist):
        """Sets the mogelijk_onjuist of this AdresUitgebreidAllOf.


        :param mogelijk_onjuist: The mogelijk_onjuist of this AdresUitgebreidAllOf.  # noqa: E501
        :type: AdresMogelijkOnjuist
        """

        self._mogelijk_onjuist = mogelijk_onjuist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdresUitgebreidAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdresUitgebreidAllOf):
            return True

        return self.to_dict() != other.to_dict()
