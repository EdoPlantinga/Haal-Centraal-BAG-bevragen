# coding: utf-8

"""
    Huidige bevragingen API

    Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: bag@kadaster.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdresseerbaarObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identificatie': 'str',
        'domein': 'str',
        'type': 'TypeAdresseerbaarObjectEnum',
        'documentdatum': 'date',
        'documentnummer': 'str',
        'gebruiksdoelen': 'list[GebruiksdoelEnum]',
        'geconstateerd': 'bool',
        'geometrie': 'PuntOfVlak',
        'pand_identificaties': 'list[str]',
        'nummeraanduiding_identificaties': 'list[NummeraanduidingIdentificatiesArray]',
        'oppervlakte': 'int',
        'status': 'AdresseerbaarObjectStatusEnum',
        'mogelijk_onjuist': 'AdresseerbaarObjectMogelijkOnjuist'
    }

    attribute_map = {
        'identificatie': 'identificatie',
        'domein': 'domein',
        'type': 'type',
        'documentdatum': 'documentdatum',
        'documentnummer': 'documentnummer',
        'gebruiksdoelen': 'gebruiksdoelen',
        'geconstateerd': 'geconstateerd',
        'geometrie': 'geometrie',
        'pand_identificaties': 'pandIdentificaties',
        'nummeraanduiding_identificaties': 'nummeraanduidingIdentificaties',
        'oppervlakte': 'oppervlakte',
        'status': 'status',
        'mogelijk_onjuist': 'mogelijkOnjuist'
    }

    def __init__(self, identificatie=None, domein=None, type=None, documentdatum=None, documentnummer=None, gebruiksdoelen=None, geconstateerd=None, geometrie=None, pand_identificaties=None, nummeraanduiding_identificaties=None, oppervlakte=None, status=None, mogelijk_onjuist=None, local_vars_configuration=None):  # noqa: E501
        """AdresseerbaarObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._identificatie = None
        self._domein = None
        self._type = None
        self._documentdatum = None
        self._documentnummer = None
        self._gebruiksdoelen = None
        self._geconstateerd = None
        self._geometrie = None
        self._pand_identificaties = None
        self._nummeraanduiding_identificaties = None
        self._oppervlakte = None
        self._status = None
        self._mogelijk_onjuist = None
        self.discriminator = None

        if identificatie is not None:
            self.identificatie = identificatie
        if domein is not None:
            self.domein = domein
        if type is not None:
            self.type = type
        if documentdatum is not None:
            self.documentdatum = documentdatum
        if documentnummer is not None:
            self.documentnummer = documentnummer
        if gebruiksdoelen is not None:
            self.gebruiksdoelen = gebruiksdoelen
        if geconstateerd is not None:
            self.geconstateerd = geconstateerd
        if geometrie is not None:
            self.geometrie = geometrie
        if pand_identificaties is not None:
            self.pand_identificaties = pand_identificaties
        if nummeraanduiding_identificaties is not None:
            self.nummeraanduiding_identificaties = nummeraanduiding_identificaties
        if oppervlakte is not None:
            self.oppervlakte = oppervlakte
        if status is not None:
            self.status = status
        if mogelijk_onjuist is not None:
            self.mogelijk_onjuist = mogelijk_onjuist

    @property
    def identificatie(self):
        """Gets the identificatie of this AdresseerbaarObject.  # noqa: E501

        Dit is de identificatie van een ligplaats, standplaats of verblijfsobject.  # noqa: E501

        :return: The identificatie of this AdresseerbaarObject.  # noqa: E501
        :rtype: str
        """
        return self._identificatie

    @identificatie.setter
    def identificatie(self, identificatie):
        """Sets the identificatie of this AdresseerbaarObject.

        Dit is de identificatie van een ligplaats, standplaats of verblijfsobject.  # noqa: E501

        :param identificatie: The identificatie of this AdresseerbaarObject.  # noqa: E501
        :type: str
        """

        self._identificatie = identificatie

    @property
    def domein(self):
        """Gets the domein of this AdresseerbaarObject.  # noqa: E501

        Het domein waartoe de identificatie behoort.  # noqa: E501

        :return: The domein of this AdresseerbaarObject.  # noqa: E501
        :rtype: str
        """
        return self._domein

    @domein.setter
    def domein(self, domein):
        """Sets the domein of this AdresseerbaarObject.

        Het domein waartoe de identificatie behoort.  # noqa: E501

        :param domein: The domein of this AdresseerbaarObject.  # noqa: E501
        :type: str
        """

        self._domein = domein

    @property
    def type(self):
        """Gets the type of this AdresseerbaarObject.  # noqa: E501


        :return: The type of this AdresseerbaarObject.  # noqa: E501
        :rtype: TypeAdresseerbaarObjectEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdresseerbaarObject.


        :param type: The type of this AdresseerbaarObject.  # noqa: E501
        :type: TypeAdresseerbaarObjectEnum
        """

        self._type = type

    @property
    def documentdatum(self):
        """Gets the documentdatum of this AdresseerbaarObject.  # noqa: E501

        De vaststellingsdatum van het brondocument dat de basis is voor opname, wijziging of een verwijdering van een object.  # noqa: E501

        :return: The documentdatum of this AdresseerbaarObject.  # noqa: E501
        :rtype: date
        """
        return self._documentdatum

    @documentdatum.setter
    def documentdatum(self, documentdatum):
        """Sets the documentdatum of this AdresseerbaarObject.

        De vaststellingsdatum van het brondocument dat de basis is voor opname, wijziging of een verwijdering van een object.  # noqa: E501

        :param documentdatum: The documentdatum of this AdresseerbaarObject.  # noqa: E501
        :type: date
        """

        self._documentdatum = documentdatum

    @property
    def documentnummer(self):
        """Gets the documentnummer of this AdresseerbaarObject.  # noqa: E501

        De unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een woonplaats heeft plaatsgevonden, binnen een gemeente. Alle karakters uit de MES-1 karakterset zijn toegstaan.  # noqa: E501

        :return: The documentnummer of this AdresseerbaarObject.  # noqa: E501
        :rtype: str
        """
        return self._documentnummer

    @documentnummer.setter
    def documentnummer(self, documentnummer):
        """Sets the documentnummer of this AdresseerbaarObject.

        De unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een woonplaats heeft plaatsgevonden, binnen een gemeente. Alle karakters uit de MES-1 karakterset zijn toegstaan.  # noqa: E501

        :param documentnummer: The documentnummer of this AdresseerbaarObject.  # noqa: E501
        :type: str
        """

        self._documentnummer = documentnummer

    @property
    def gebruiksdoelen(self):
        """Gets the gebruiksdoelen of this AdresseerbaarObject.  # noqa: E501


        :return: The gebruiksdoelen of this AdresseerbaarObject.  # noqa: E501
        :rtype: list[GebruiksdoelEnum]
        """
        return self._gebruiksdoelen

    @gebruiksdoelen.setter
    def gebruiksdoelen(self, gebruiksdoelen):
        """Sets the gebruiksdoelen of this AdresseerbaarObject.


        :param gebruiksdoelen: The gebruiksdoelen of this AdresseerbaarObject.  # noqa: E501
        :type: list[GebruiksdoelEnum]
        """

        self._gebruiksdoelen = gebruiksdoelen

    @property
    def geconstateerd(self):
        """Gets the geconstateerd of this AdresseerbaarObject.  # noqa: E501

        Indicatie dat een standplaats, ligplaats of verblijfsobject in de registratie is opgenomen door een feitelijke constatering, zonder dat er een brondocument aan ten grondslag ligt. Het adresseerbaar object is mogelijk illegaal.  # noqa: E501

        :return: The geconstateerd of this AdresseerbaarObject.  # noqa: E501
        :rtype: bool
        """
        return self._geconstateerd

    @geconstateerd.setter
    def geconstateerd(self, geconstateerd):
        """Sets the geconstateerd of this AdresseerbaarObject.

        Indicatie dat een standplaats, ligplaats of verblijfsobject in de registratie is opgenomen door een feitelijke constatering, zonder dat er een brondocument aan ten grondslag ligt. Het adresseerbaar object is mogelijk illegaal.  # noqa: E501

        :param geconstateerd: The geconstateerd of this AdresseerbaarObject.  # noqa: E501
        :type: bool
        """

        self._geconstateerd = geconstateerd

    @property
    def geometrie(self):
        """Gets the geometrie of this AdresseerbaarObject.  # noqa: E501


        :return: The geometrie of this AdresseerbaarObject.  # noqa: E501
        :rtype: PuntOfVlak
        """
        return self._geometrie

    @geometrie.setter
    def geometrie(self, geometrie):
        """Sets the geometrie of this AdresseerbaarObject.


        :param geometrie: The geometrie of this AdresseerbaarObject.  # noqa: E501
        :type: PuntOfVlak
        """

        self._geometrie = geometrie

    @property
    def pand_identificaties(self):
        """Gets the pand_identificaties of this AdresseerbaarObject.  # noqa: E501

        Identificatie(s) van het pand of de panden waar het verblijfsobject deel van is.  # noqa: E501

        :return: The pand_identificaties of this AdresseerbaarObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._pand_identificaties

    @pand_identificaties.setter
    def pand_identificaties(self, pand_identificaties):
        """Sets the pand_identificaties of this AdresseerbaarObject.

        Identificatie(s) van het pand of de panden waar het verblijfsobject deel van is.  # noqa: E501

        :param pand_identificaties: The pand_identificaties of this AdresseerbaarObject.  # noqa: E501
        :type: list[str]
        """

        self._pand_identificaties = pand_identificaties

    @property
    def nummeraanduiding_identificaties(self):
        """Gets the nummeraanduiding_identificaties of this AdresseerbaarObject.  # noqa: E501

        Identificatie(s) van de hoofd- en nevenadressen van de standplaats, ligplaats of verblijfsobject.  # noqa: E501

        :return: The nummeraanduiding_identificaties of this AdresseerbaarObject.  # noqa: E501
        :rtype: list[NummeraanduidingIdentificatiesArray]
        """
        return self._nummeraanduiding_identificaties

    @nummeraanduiding_identificaties.setter
    def nummeraanduiding_identificaties(self, nummeraanduiding_identificaties):
        """Sets the nummeraanduiding_identificaties of this AdresseerbaarObject.

        Identificatie(s) van de hoofd- en nevenadressen van de standplaats, ligplaats of verblijfsobject.  # noqa: E501

        :param nummeraanduiding_identificaties: The nummeraanduiding_identificaties of this AdresseerbaarObject.  # noqa: E501
        :type: list[NummeraanduidingIdentificatiesArray]
        """

        self._nummeraanduiding_identificaties = nummeraanduiding_identificaties

    @property
    def oppervlakte(self):
        """Gets the oppervlakte of this AdresseerbaarObject.  # noqa: E501


        :return: The oppervlakte of this AdresseerbaarObject.  # noqa: E501
        :rtype: int
        """
        return self._oppervlakte

    @oppervlakte.setter
    def oppervlakte(self, oppervlakte):
        """Sets the oppervlakte of this AdresseerbaarObject.


        :param oppervlakte: The oppervlakte of this AdresseerbaarObject.  # noqa: E501
        :type: int
        """

        self._oppervlakte = oppervlakte

    @property
    def status(self):
        """Gets the status of this AdresseerbaarObject.  # noqa: E501


        :return: The status of this AdresseerbaarObject.  # noqa: E501
        :rtype: AdresseerbaarObjectStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdresseerbaarObject.


        :param status: The status of this AdresseerbaarObject.  # noqa: E501
        :type: AdresseerbaarObjectStatusEnum
        """

        self._status = status

    @property
    def mogelijk_onjuist(self):
        """Gets the mogelijk_onjuist of this AdresseerbaarObject.  # noqa: E501


        :return: The mogelijk_onjuist of this AdresseerbaarObject.  # noqa: E501
        :rtype: AdresseerbaarObjectMogelijkOnjuist
        """
        return self._mogelijk_onjuist

    @mogelijk_onjuist.setter
    def mogelijk_onjuist(self, mogelijk_onjuist):
        """Sets the mogelijk_onjuist of this AdresseerbaarObject.


        :param mogelijk_onjuist: The mogelijk_onjuist of this AdresseerbaarObject.  # noqa: E501
        :type: AdresseerbaarObjectMogelijkOnjuist
        """

        self._mogelijk_onjuist = mogelijk_onjuist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdresseerbaarObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdresseerbaarObject):
            return True

        return self.to_dict() != other.to_dict()
