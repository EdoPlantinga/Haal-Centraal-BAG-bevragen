# coding: utf-8

"""
    Huidige bevragingen API

    Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: bag@kadaster.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdresseerbaarObjectMogelijkOnjuist(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gebruiksdoelen': 'bool',
        'geometrie': 'bool',
        'nummeraanduiding_identificaties': 'bool',
        'pand_identificaties': 'bool',
        'oppervlakte': 'bool',
        'status': 'bool',
        'toelichting': 'list[str]'
    }

    attribute_map = {
        'gebruiksdoelen': 'gebruiksdoelen',
        'geometrie': 'geometrie',
        'nummeraanduiding_identificaties': 'nummeraanduidingIdentificaties',
        'pand_identificaties': 'pandIdentificaties',
        'oppervlakte': 'oppervlakte',
        'status': 'status',
        'toelichting': 'toelichting'
    }

    def __init__(self, gebruiksdoelen=None, geometrie=None, nummeraanduiding_identificaties=None, pand_identificaties=None, oppervlakte=None, status=None, toelichting=None, local_vars_configuration=None):  # noqa: E501
        """AdresseerbaarObjectMogelijkOnjuist - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gebruiksdoelen = None
        self._geometrie = None
        self._nummeraanduiding_identificaties = None
        self._pand_identificaties = None
        self._oppervlakte = None
        self._status = None
        self._toelichting = None
        self.discriminator = None

        if gebruiksdoelen is not None:
            self.gebruiksdoelen = gebruiksdoelen
        if geometrie is not None:
            self.geometrie = geometrie
        if nummeraanduiding_identificaties is not None:
            self.nummeraanduiding_identificaties = nummeraanduiding_identificaties
        if pand_identificaties is not None:
            self.pand_identificaties = pand_identificaties
        if oppervlakte is not None:
            self.oppervlakte = oppervlakte
        if status is not None:
            self.status = status
        if toelichting is not None:
            self.toelichting = toelichting

    @property
    def gebruiksdoelen(self):
        """Gets the gebruiksdoelen of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The gebruiksdoelen of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._gebruiksdoelen

    @gebruiksdoelen.setter
    def gebruiksdoelen(self, gebruiksdoelen):
        """Sets the gebruiksdoelen of this AdresseerbaarObjectMogelijkOnjuist.


        :param gebruiksdoelen: The gebruiksdoelen of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._gebruiksdoelen = gebruiksdoelen

    @property
    def geometrie(self):
        """Gets the geometrie of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The geometrie of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._geometrie

    @geometrie.setter
    def geometrie(self, geometrie):
        """Sets the geometrie of this AdresseerbaarObjectMogelijkOnjuist.


        :param geometrie: The geometrie of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._geometrie = geometrie

    @property
    def nummeraanduiding_identificaties(self):
        """Gets the nummeraanduiding_identificaties of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The nummeraanduiding_identificaties of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._nummeraanduiding_identificaties

    @nummeraanduiding_identificaties.setter
    def nummeraanduiding_identificaties(self, nummeraanduiding_identificaties):
        """Sets the nummeraanduiding_identificaties of this AdresseerbaarObjectMogelijkOnjuist.


        :param nummeraanduiding_identificaties: The nummeraanduiding_identificaties of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._nummeraanduiding_identificaties = nummeraanduiding_identificaties

    @property
    def pand_identificaties(self):
        """Gets the pand_identificaties of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The pand_identificaties of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._pand_identificaties

    @pand_identificaties.setter
    def pand_identificaties(self, pand_identificaties):
        """Sets the pand_identificaties of this AdresseerbaarObjectMogelijkOnjuist.


        :param pand_identificaties: The pand_identificaties of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._pand_identificaties = pand_identificaties

    @property
    def oppervlakte(self):
        """Gets the oppervlakte of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The oppervlakte of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._oppervlakte

    @oppervlakte.setter
    def oppervlakte(self, oppervlakte):
        """Sets the oppervlakte of this AdresseerbaarObjectMogelijkOnjuist.


        :param oppervlakte: The oppervlakte of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._oppervlakte = oppervlakte

    @property
    def status(self):
        """Gets the status of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The status of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdresseerbaarObjectMogelijkOnjuist.


        :param status: The status of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def toelichting(self):
        """Gets the toelichting of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501


        :return: The toelichting of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :rtype: list[str]
        """
        return self._toelichting

    @toelichting.setter
    def toelichting(self, toelichting):
        """Sets the toelichting of this AdresseerbaarObjectMogelijkOnjuist.


        :param toelichting: The toelichting of this AdresseerbaarObjectMogelijkOnjuist.  # noqa: E501
        :type: list[str]
        """

        self._toelichting = toelichting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdresseerbaarObjectMogelijkOnjuist):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdresseerbaarObjectMogelijkOnjuist):
            return True

        return self.to_dict() != other.to_dict()
