# coding: utf-8

"""
    Huidige bevragingen API

    Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: bag@kadaster.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OpenbareRuimteMogelijkOnjuist(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'naam': 'bool',
        'korte_naam': 'bool',
        'type': 'bool',
        'status': 'bool',
        'woonplaats_identificatie': 'bool',
        'toelichting': 'list[str]'
    }

    attribute_map = {
        'naam': 'naam',
        'korte_naam': 'korteNaam',
        'type': 'type',
        'status': 'status',
        'woonplaats_identificatie': 'woonplaatsIdentificatie',
        'toelichting': 'toelichting'
    }

    def __init__(self, naam=None, korte_naam=None, type=None, status=None, woonplaats_identificatie=None, toelichting=None, local_vars_configuration=None):  # noqa: E501
        """OpenbareRuimteMogelijkOnjuist - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._naam = None
        self._korte_naam = None
        self._type = None
        self._status = None
        self._woonplaats_identificatie = None
        self._toelichting = None
        self.discriminator = None

        if naam is not None:
            self.naam = naam
        if korte_naam is not None:
            self.korte_naam = korte_naam
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if woonplaats_identificatie is not None:
            self.woonplaats_identificatie = woonplaats_identificatie
        if toelichting is not None:
            self.toelichting = toelichting

    @property
    def naam(self):
        """Gets the naam of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501


        :return: The naam of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._naam

    @naam.setter
    def naam(self, naam):
        """Sets the naam of this OpenbareRuimteMogelijkOnjuist.


        :param naam: The naam of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._naam = naam

    @property
    def korte_naam(self):
        """Gets the korte_naam of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501


        :return: The korte_naam of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._korte_naam

    @korte_naam.setter
    def korte_naam(self, korte_naam):
        """Sets the korte_naam of this OpenbareRuimteMogelijkOnjuist.


        :param korte_naam: The korte_naam of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._korte_naam = korte_naam

    @property
    def type(self):
        """Gets the type of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501


        :return: The type of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenbareRuimteMogelijkOnjuist.


        :param type: The type of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501


        :return: The status of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OpenbareRuimteMogelijkOnjuist.


        :param status: The status of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def woonplaats_identificatie(self):
        """Gets the woonplaats_identificatie of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501


        :return: The woonplaats_identificatie of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :rtype: bool
        """
        return self._woonplaats_identificatie

    @woonplaats_identificatie.setter
    def woonplaats_identificatie(self, woonplaats_identificatie):
        """Sets the woonplaats_identificatie of this OpenbareRuimteMogelijkOnjuist.


        :param woonplaats_identificatie: The woonplaats_identificatie of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :type: bool
        """

        self._woonplaats_identificatie = woonplaats_identificatie

    @property
    def toelichting(self):
        """Gets the toelichting of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501


        :return: The toelichting of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :rtype: list[str]
        """
        return self._toelichting

    @toelichting.setter
    def toelichting(self, toelichting):
        """Sets the toelichting of this OpenbareRuimteMogelijkOnjuist.


        :param toelichting: The toelichting of this OpenbareRuimteMogelijkOnjuist.  # noqa: E501
        :type: list[str]
        """

        self._toelichting = toelichting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenbareRuimteMogelijkOnjuist):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenbareRuimteMogelijkOnjuist):
            return True

        return self.to_dict() != other.to_dict()
