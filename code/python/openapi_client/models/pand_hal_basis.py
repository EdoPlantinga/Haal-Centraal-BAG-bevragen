# coding: utf-8

"""
    Huidige bevragingen API

    Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: bag@kadaster.nl
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PandHalBasis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identificatie': 'str',
        'domein': 'str',
        'geometrie': 'PolygonGeoJSON',
        'oorspronkelijk_bouwjaar': 'int',
        'status': 'StatusPandEnum',
        'geconstateerd': 'bool',
        'documentdatum': 'date',
        'documentnummer': 'str',
        'adresseerbaar_object_identificaties': 'list[str]',
        'nummeraanduiding_identificaties': 'list[NummeraanduidingIdentificatiesArray]',
        'mogelijk_onjuist': 'PandMogelijkOnjuist',
        'links': 'PandLinks'
    }

    attribute_map = {
        'identificatie': 'identificatie',
        'domein': 'domein',
        'geometrie': 'geometrie',
        'oorspronkelijk_bouwjaar': 'oorspronkelijkBouwjaar',
        'status': 'status',
        'geconstateerd': 'geconstateerd',
        'documentdatum': 'documentdatum',
        'documentnummer': 'documentnummer',
        'adresseerbaar_object_identificaties': 'adresseerbaarObjectIdentificaties',
        'nummeraanduiding_identificaties': 'nummeraanduidingIdentificaties',
        'mogelijk_onjuist': 'mogelijkOnjuist',
        'links': '_links'
    }

    def __init__(self, identificatie=None, domein=None, geometrie=None, oorspronkelijk_bouwjaar=None, status=None, geconstateerd=None, documentdatum=None, documentnummer=None, adresseerbaar_object_identificaties=None, nummeraanduiding_identificaties=None, mogelijk_onjuist=None, links=None, local_vars_configuration=None):  # noqa: E501
        """PandHalBasis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._identificatie = None
        self._domein = None
        self._geometrie = None
        self._oorspronkelijk_bouwjaar = None
        self._status = None
        self._geconstateerd = None
        self._documentdatum = None
        self._documentnummer = None
        self._adresseerbaar_object_identificaties = None
        self._nummeraanduiding_identificaties = None
        self._mogelijk_onjuist = None
        self._links = None
        self.discriminator = None

        if identificatie is not None:
            self.identificatie = identificatie
        if domein is not None:
            self.domein = domein
        if geometrie is not None:
            self.geometrie = geometrie
        if oorspronkelijk_bouwjaar is not None:
            self.oorspronkelijk_bouwjaar = oorspronkelijk_bouwjaar
        if status is not None:
            self.status = status
        if geconstateerd is not None:
            self.geconstateerd = geconstateerd
        if documentdatum is not None:
            self.documentdatum = documentdatum
        if documentnummer is not None:
            self.documentnummer = documentnummer
        if adresseerbaar_object_identificaties is not None:
            self.adresseerbaar_object_identificaties = adresseerbaar_object_identificaties
        if nummeraanduiding_identificaties is not None:
            self.nummeraanduiding_identificaties = nummeraanduiding_identificaties
        if mogelijk_onjuist is not None:
            self.mogelijk_onjuist = mogelijk_onjuist
        if links is not None:
            self.links = links

    @property
    def identificatie(self):
        """Gets the identificatie of this PandHalBasis.  # noqa: E501

        De unieke aanduiding van een pand. Elk pand waarvan gegevens zijn opgenomen in de BAG wordt uniek aangeduid door middel van een identificatiecode.  # noqa: E501

        :return: The identificatie of this PandHalBasis.  # noqa: E501
        :rtype: str
        """
        return self._identificatie

    @identificatie.setter
    def identificatie(self, identificatie):
        """Sets the identificatie of this PandHalBasis.

        De unieke aanduiding van een pand. Elk pand waarvan gegevens zijn opgenomen in de BAG wordt uniek aangeduid door middel van een identificatiecode.  # noqa: E501

        :param identificatie: The identificatie of this PandHalBasis.  # noqa: E501
        :type: str
        """

        self._identificatie = identificatie

    @property
    def domein(self):
        """Gets the domein of this PandHalBasis.  # noqa: E501

        Het domein waartoe de identificatie behoort.  # noqa: E501

        :return: The domein of this PandHalBasis.  # noqa: E501
        :rtype: str
        """
        return self._domein

    @domein.setter
    def domein(self, domein):
        """Sets the domein of this PandHalBasis.

        Het domein waartoe de identificatie behoort.  # noqa: E501

        :param domein: The domein of this PandHalBasis.  # noqa: E501
        :type: str
        """

        self._domein = domein

    @property
    def geometrie(self):
        """Gets the geometrie of this PandHalBasis.  # noqa: E501


        :return: The geometrie of this PandHalBasis.  # noqa: E501
        :rtype: PolygonGeoJSON
        """
        return self._geometrie

    @geometrie.setter
    def geometrie(self, geometrie):
        """Sets the geometrie of this PandHalBasis.


        :param geometrie: The geometrie of this PandHalBasis.  # noqa: E501
        :type: PolygonGeoJSON
        """

        self._geometrie = geometrie

    @property
    def oorspronkelijk_bouwjaar(self):
        """Gets the oorspronkelijk_bouwjaar of this PandHalBasis.  # noqa: E501

        Het jaar waarin een pand oorspronkelijk als bouwkundig gereed is wordt opgeleverd. Door de gemeente wordt een inschatting gemaakt van het bouwjaar, en aangepast als het pand wordt opgeleverd. Wijzigingen aan een pand na oplevering leiden niet tot wijziging van het bouwjaar.  # noqa: E501

        :return: The oorspronkelijk_bouwjaar of this PandHalBasis.  # noqa: E501
        :rtype: int
        """
        return self._oorspronkelijk_bouwjaar

    @oorspronkelijk_bouwjaar.setter
    def oorspronkelijk_bouwjaar(self, oorspronkelijk_bouwjaar):
        """Sets the oorspronkelijk_bouwjaar of this PandHalBasis.

        Het jaar waarin een pand oorspronkelijk als bouwkundig gereed is wordt opgeleverd. Door de gemeente wordt een inschatting gemaakt van het bouwjaar, en aangepast als het pand wordt opgeleverd. Wijzigingen aan een pand na oplevering leiden niet tot wijziging van het bouwjaar.  # noqa: E501

        :param oorspronkelijk_bouwjaar: The oorspronkelijk_bouwjaar of this PandHalBasis.  # noqa: E501
        :type: int
        """

        self._oorspronkelijk_bouwjaar = oorspronkelijk_bouwjaar

    @property
    def status(self):
        """Gets the status of this PandHalBasis.  # noqa: E501


        :return: The status of this PandHalBasis.  # noqa: E501
        :rtype: StatusPandEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PandHalBasis.


        :param status: The status of this PandHalBasis.  # noqa: E501
        :type: StatusPandEnum
        """

        self._status = status

    @property
    def geconstateerd(self):
        """Gets the geconstateerd of this PandHalBasis.  # noqa: E501

        Indicatie dat het pand in de registratie is opgenomen door een feitelijke constatering, zonder dat er sprake was van een brondocument/vergunning. Het pand is mogelijk illegaal.  # noqa: E501

        :return: The geconstateerd of this PandHalBasis.  # noqa: E501
        :rtype: bool
        """
        return self._geconstateerd

    @geconstateerd.setter
    def geconstateerd(self, geconstateerd):
        """Sets the geconstateerd of this PandHalBasis.

        Indicatie dat het pand in de registratie is opgenomen door een feitelijke constatering, zonder dat er sprake was van een brondocument/vergunning. Het pand is mogelijk illegaal.  # noqa: E501

        :param geconstateerd: The geconstateerd of this PandHalBasis.  # noqa: E501
        :type: bool
        """

        self._geconstateerd = geconstateerd

    @property
    def documentdatum(self):
        """Gets the documentdatum of this PandHalBasis.  # noqa: E501

        De vaststellingsdatum van het brondocument dat de basis is voor opname, wijziging of een verwijdering van een object.  # noqa: E501

        :return: The documentdatum of this PandHalBasis.  # noqa: E501
        :rtype: date
        """
        return self._documentdatum

    @documentdatum.setter
    def documentdatum(self, documentdatum):
        """Sets the documentdatum of this PandHalBasis.

        De vaststellingsdatum van het brondocument dat de basis is voor opname, wijziging of een verwijdering van een object.  # noqa: E501

        :param documentdatum: The documentdatum of this PandHalBasis.  # noqa: E501
        :type: date
        """

        self._documentdatum = documentdatum

    @property
    def documentnummer(self):
        """Gets the documentnummer of this PandHalBasis.  # noqa: E501

        De unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een woonplaats heeft plaatsgevonden, binnen een gemeente. Alle karakters uit de MES-1 karakterset zijn toegstaan.  # noqa: E501

        :return: The documentnummer of this PandHalBasis.  # noqa: E501
        :rtype: str
        """
        return self._documentnummer

    @documentnummer.setter
    def documentnummer(self, documentnummer):
        """Sets the documentnummer of this PandHalBasis.

        De unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van een woonplaats heeft plaatsgevonden, binnen een gemeente. Alle karakters uit de MES-1 karakterset zijn toegstaan.  # noqa: E501

        :param documentnummer: The documentnummer of this PandHalBasis.  # noqa: E501
        :type: str
        """

        self._documentnummer = documentnummer

    @property
    def adresseerbaar_object_identificaties(self):
        """Gets the adresseerbaar_object_identificaties of this PandHalBasis.  # noqa: E501


        :return: The adresseerbaar_object_identificaties of this PandHalBasis.  # noqa: E501
        :rtype: list[str]
        """
        return self._adresseerbaar_object_identificaties

    @adresseerbaar_object_identificaties.setter
    def adresseerbaar_object_identificaties(self, adresseerbaar_object_identificaties):
        """Sets the adresseerbaar_object_identificaties of this PandHalBasis.


        :param adresseerbaar_object_identificaties: The adresseerbaar_object_identificaties of this PandHalBasis.  # noqa: E501
        :type: list[str]
        """

        self._adresseerbaar_object_identificaties = adresseerbaar_object_identificaties

    @property
    def nummeraanduiding_identificaties(self):
        """Gets the nummeraanduiding_identificaties of this PandHalBasis.  # noqa: E501

        Identificatie(s) van de hoofd- en nevenadressen van het pand.  # noqa: E501

        :return: The nummeraanduiding_identificaties of this PandHalBasis.  # noqa: E501
        :rtype: list[NummeraanduidingIdentificatiesArray]
        """
        return self._nummeraanduiding_identificaties

    @nummeraanduiding_identificaties.setter
    def nummeraanduiding_identificaties(self, nummeraanduiding_identificaties):
        """Sets the nummeraanduiding_identificaties of this PandHalBasis.

        Identificatie(s) van de hoofd- en nevenadressen van het pand.  # noqa: E501

        :param nummeraanduiding_identificaties: The nummeraanduiding_identificaties of this PandHalBasis.  # noqa: E501
        :type: list[NummeraanduidingIdentificatiesArray]
        """

        self._nummeraanduiding_identificaties = nummeraanduiding_identificaties

    @property
    def mogelijk_onjuist(self):
        """Gets the mogelijk_onjuist of this PandHalBasis.  # noqa: E501


        :return: The mogelijk_onjuist of this PandHalBasis.  # noqa: E501
        :rtype: PandMogelijkOnjuist
        """
        return self._mogelijk_onjuist

    @mogelijk_onjuist.setter
    def mogelijk_onjuist(self, mogelijk_onjuist):
        """Sets the mogelijk_onjuist of this PandHalBasis.


        :param mogelijk_onjuist: The mogelijk_onjuist of this PandHalBasis.  # noqa: E501
        :type: PandMogelijkOnjuist
        """

        self._mogelijk_onjuist = mogelijk_onjuist

    @property
    def links(self):
        """Gets the links of this PandHalBasis.  # noqa: E501


        :return: The links of this PandHalBasis.  # noqa: E501
        :rtype: PandLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PandHalBasis.


        :param links: The links of this PandHalBasis.  # noqa: E501
        :type: PandLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PandHalBasis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PandHalBasis):
            return True

        return self.to_dict() != other.to_dict()
